{
  "id": "chatcmpl-A3UEJ8Qh9wnsdnuvRItFO9OrnFj3v",
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "message": {
        "content": "tpiw | We first show that if Z star equals left bracket X plus star, X minus star right bracket satisfies fifty-nine and sixty then X star equals X plus star minus X minus star satisfies sixty-one. First, suppose left bracket X star right bracket to the I is greater than zero. In this case, we must have left bracket X star right bracket to the I equals left bracket X plus star right bracket to the I is greater than zero equals left bracket X minus star right bracket to the I, which from the first case of fifty-nine implies the first case of sixty-one. When left bracket X star right bracket to the I is less than zero, since left bracket X star right bracket to the I equals left bracket X minus star right bracket to the I is greater than zero equals left bracket X plus star right bracket to the I, the first case of sixty implies the first case of sixty-one. Finally, when left bracket X star right bracket to the I equals zero, we have left bracket X plus star right bracket to the I equals left bracket X minus star right bracket to the I equals zero, and we appeal to the second case of both fifty-nine and sixty to obtain\ndgkq | left bracket nabla F left parenthesis X star right parenthesis right bracket to the I is greater than or equal to negative lambda, and left bracket nabla F left parenthesis X star right parenthesis right bracket to the I is less than or equal to lambda, which implies the absolute value of left bracket nabla F left parenthesis X star right parenthesis right bracket to the I absolute value is less than or equal to lambda, i.e., the third case of sixty-one.\nhxjr | We now show that if X star equals X plus star minus X minus star satisfies sixty-one, then if Z star equals left bracket X plus star, X minus star right bracket satisfies fifty-nine and sixty. Consider the first case of sixty-one. Noting again that left bracket X star right bracket to the I equals left bracket X plus star right bracket to the I is greater than zero equals left bracket X minus star right bracket to the I, it clearly implies the first and the second cases of fifty-nine and sixty, respectively (recall lambda is greater than zero). Similarly, the second case of sixty-one implies the second and the first cases of fifty-nine and sixty, respectively. Finally, it is clear that the third case of sixty-one implies the second case for both fifty-nine and sixty.\n2yv3 | F point three. Additional Experimental Details\nopoe | Oracle Calls as Complexity Measure Following the typical convection in the optimisation literature, in all our experiments, we plot the objective value against the total number of oracle calls for function, gradient, and Hessian-vector product evaluations. We adopt this approach because the measurement of \"wall-clock\" time can be heavily dependent on specific implementation details and computational platform. In contrast, counting the number of equivalent function evaluations, as an implementation and system independent unit of complexity is more appropriate and fair. More specifically, upon evaluating the function, computing its gradient is equivalent to one additional function evaluation, and computing a Hessian-vector product requires two additional function evaluations compared to a gradient evaluation. For example, in neural networks, for a given data at the input layer, evaluation of network's output, i.e., function evaluation, involves one forward propagation. The corresponding gradient is computed by performing one additional backward propagation. After computing the gradient, an additional forward followed by a backward propagation give the corresponding Hessian-vector product.\nvr2v | Parameter Settings In all experiments we set epsilon subscript k equals delta subscript k equals square root of epsilon subscript g as per Theorem three point eight. For the Newton-MR TMP we set the inexactness condition for MINRES, i.e., ten, to eta equals ten to the minus two for convex problems and eta equals one for nonconvex problems. We apply a less stringent tolerance in the nonconvex case to maximise the chances of terminating early with a \"good enough\"\nm4jl | Inexact Newton-type Methods for Optimisation with Nonnegativity Constraints\n59hi | SOL type solution. Indeed, running the solver too long increases the odds that spurious negative curvature direction will arise as part of iterations. Since such directions never occur in convex settings, one can afford to solve the subproblems more accurately.\nua3p | For projected Newton-CG, we use the parameter settings from the experiments in Xie and Wright, twenty twenty-three. Specifically, in the notation of Xie and Wright, twenty twenty-three, we set the accuracy parameter and back tracking parameter to zeta equals theta equals zero point five and the step acceptance parameter to eta equals zero point two. Furthermore, following the algorithmic to have equivalent termination conditions, we modify the gradient negativity check begin array lescription of Xie eight Wright two thousand twenty-three, and from g subscript L to the I is less than negative epsilon subscript L to the power of three over two to g subscript k to the I is less than negative epsilon subscript k for this end array g subscript k to the I is less than negative epsilon subscript k to the power of three over two g subscript k to the I is less than negative epsilon subscript k method.",
        "role": "assistant",
        "function_call": null,
        "tool_calls": null,
        "refusal": null
      }
    }
  ],
  "created": 1725394551,
  "model": "gpt-4o-2024-05-13",
  "object": "chat.completion",
  "system_fingerprint": "fp_fde2829a40",
  "usage": {
    "completion_tokens": 1079,
    "prompt_tokens": 3334,
    "total_tokens": 4413
  }
}