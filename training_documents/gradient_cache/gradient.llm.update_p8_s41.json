{
  "id": "chatcmpl-A3U7Q7YojrEeYvNCzJf5XhRb2YJga",
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "message": {
        "content": "8sqd | Layer F6 contains eighty-four units and is fully connected to C5. It has ten thousand one hundred sixty-four trainable parameters.\nvlyz | As in classical neural networks, units in layers up to F6 compute a dot product between their input vector and their weight vector, to which a bias is added. This weighted sum, denoted a sub i for unit i, is then passed through a sigmoid\n5034 | squashing function to produce the state of unit i, denoted by x sub i.\n9lvu | X sub i equals f of a sub i.\nuy7a | The squashing function is a scaled hyperbolic tangent\nlqs6 | f of a equals A tanh of S a.\nri4s | where A is the amplitude of the function and S determines its slope at the origin. The function f is odd, with horizontal asymptotes at plus A and minus A. The constant A is chosen to be one point seven one five nine. The rationale for this choice of a squashing function is given in Appendix A.\nqrl1 | Finally, the output layer is composed of Euclidean radial basis function units, one for each class, with eighty-four inputs each. The output of each RBF unit y sub i is computed as follows.\nuvvk | y sub i equals parenthesis P sub i minus W sub i j squared.\nmdnj | In other words, each output RBF unit computes the Euclidean distance between its input vector and its parameter vector. The further away the input is from the parameter vector, the larger the RBF output. The output of a particular RBF can be interpreted as a penalty term measuring the fit between the input pattern and a model of the class associated with the RBF. In probabilistic terms, the RBF output can be interpreted as the unnormalized negative log-likelihood of a Gaussian distribution in the space of configurations of layer F6. Given an input pattern, the loss function should be designed so as to get the configuration of F6 as close as possible to the parameter vector of the RBF that corresponds to the pattern's desired class. The parameter vectors of these units were chosen by hand and kept fixed, at least initially. The components of those parameter vectors were set to negative one or positive one. While they could have been chosen at random with equal probabilities for negative one and positive one, or even chosen to form an error correcting code, they were instead designed to represent a stylized image of the corresponding character class drawn on a seven by twelve bitmap, hence the number eighty-four. Such a representation is not particularly useful for recognizing isolated digits, but it is quite useful for recognizing strings of characters taken from the fully printable ASCII set. The rationale is that characters that are similar, and therefore confusable, such as uppercase \"O,\" lowercase \"o,\" and zero, lowercase \"L\" digit one, and square brackets and uppercase \"L,\" will have similar output codes. This is particularly useful if the system is combined with a linguistic post- processor that can correct such confusions. Because the codes for confusable classes are similar, the output of the corresponding RBF's for an ambiguous character will be similar, and the postprocessor will be able to pick the appropriate interpretation.\nmwy0 | Another reason for using such distributed codes, rather than the more common \"one of N\" code, also called place code or grandmother cell code, for the outputs is that nondistributed codes tend to behave badly when the number\nhg8q | of classes is larger than a few dozen. The reason is that output units in a nondistributed code must be off most of the time. This is quite difficult to achieve with sigmoid units. Yet another reason is that the classifiers are often used not only to recognize characters, but also to reject noncharacters. RBF's with distributed codes are more appropriate for that purpose because unlike sigmoids, they are activated within a well-circumscribed region of their input space, outside of which nontypical patterns are more likely to fall.\nrcyg | The parameter vectors of the RBF's play the role of target vectors for layer F6. It is worth pointing out that the components of those vectors are positive one or negative one, which is well within the range of the sigmoid of F6, and therefore prevents those sigmoids from getting saturated. In fact, positive one and negative one are the points of maximum curvature of the sigmoids. This forces the F6 units to operate in their maximally nonlinear range. Saturation of the sigmoids must be avoided because it is known to lead to slow convergence and ill-conditioning of the loss function.\nbj8l | C. Loss Function\ncygk | The simplest output loss function that can be used with the above network is the maximum likelihood estimation criterion, which in our case is equivalent to the minimum mean squared error. The criterion for a set of training samples is simply\nrtk7 | E of W equals summation over p UDP of ZP, W p equals one to P.\n1wc3 | where yDp is the output of the Dp-th RBF unit, i.e., the one that corresponds to the correct class of input pattern ZP. While this cost function is appropriate for most cases, it lacks three important properties. First, if we allow the parameters of the RBF to adapt, E of W has a trivial, but totally unacceptable, solution. In this solution, all the RBF parameter vectors are equal and the state of F6 is constant and equal to that parameter vector. In this case the network happily ignores the input, and all the RBF outputs are equal\n6kja | to zero. This collapsing phenomenon does not occur if the RBF weights are not allowed to adapt. The second problem is that there is no competition between the classes. Such a competition can be obtained by using a more discriminative training criterion, dubbed the maximum a posteriori criterion, similar to the maximum mutual information criterion sometimes used to train hidden Markov models. It corresponds to maximizing the posterior probability of the correct class Dp, or minimizing the logarithm of the probability of the correct class, given that the input image can come from one of the classes or from a background \"rubbish\" class label. In terms of penalties, it means that in addition to pushing down the penalty of the correct class like the mean squared error criterion, this criterion also pulls up the penalties of the incorrect classes\nfmi5 | E of W equals summation over p equals one to P, UDP of ZP, W\nbqn5 | plus\n4lyq | the logarithm of e to the negative j plus summation of e to negative y sub i of ZP, W.\njzqz | The negative of the second term plays a \"competitive\" role. It is necessarily smaller than, or equal to, the first term, therefore this loss function is positive. The constant j is positive and prevents the penalties of classes that are already very large from being pushed further up. The posterior probability of this rubbish class label would be the ratio of e to the negative j and e to the negative summation y sub i of ZP, W. This discriminative criterion prevents the previously mentioned \"collapsing effect\" when the RBF parameters are learned because it keeps the RBF centers apart from each other. In Section VI, we present a generalization of this criterion for systems that learn to classify multiple objects in the input, for example, characters in words or in documents.\napx3 | Computing the gradient of the loss function with respect to all the weights in all the layers of the convolutional network is done with back propagation. The standard algorithm must be slightly modified to take account of the\nkcrm | weight sharing. An easy way to implement it is to first compute the partial derivatives of the loss function with respect to each connection, as if the network were a conventional multilayer network without weight sharing. Then the partial derivatives of all the connections that share a same parameter are added to form the derivative with respect to that parameter.",
        "role": "assistant",
        "function_call": null,
        "tool_calls": null,
        "refusal": null
      }
    }
  ],
  "created": 1725394124,
  "model": "gpt-4o-2024-05-13",
  "object": "chat.completion",
  "system_fingerprint": "fp_fde2829a40",
  "usage": {
    "completion_tokens": 1663,
    "prompt_tokens": 3367,
    "total_tokens": 5030
  }
}