{
  "id": "chatcmpl-A3U7Q9dA82effdv5fUDFqZU3dwJIw",
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "message": {
        "content": "w4hq | PGRAPH graphTwo, PTRANS trans)\nghbe | Returns PGRAPH { // Create new graph PGRAPH newGraph = new_graph ()\n1lkf | // Create map between token positions // and nodes of the new graph PNODE map [PNODE, PNODE] = new_empty_map() map [endNode (graphOne), endNode(graphTwo)] = endNode (newGraph)\nuobn | // Recursive subroutine for simulating tokens Function simTokens (PNODE nodeOne, PNODE nodeTwo) Returns PNODE {\n3194 | PNODE currentNode = map[nodeOne, nodeTwo] // Check if already visited If (currentNode == nil)\nr22o | // Record new configuration currentNode = newGraph->create_node () map [nodeOne, nodeTwo] = currentNode // Enumerate the possible non-null // joint token transitions For ARC arcOne in down_arcs (nodeOne) For ARC arcTwo in down_arcs (nodeTwo) If (trans->check(arcOne, arcTwo)) PNODE newNode = simTokens (down_node (arcOne) , down_node (arcTwo)) trans->fprop(newGraph, currentNode, newNode, arcOne, arcTwo) // Return node in composed graph Return currentNode }\nnupw | // Perform token simulation simTokens (startNode(graphOne), startNode(graphTwo)) Delete map Return newGraph }\n37xs | trajectory is acceptable (i.e., both tokens simultaneously reach the end nodes of their graphs). The management of null transitions is a straightforward modification of the token simulation function. Before enumerating the possible nonnull joint token transitions, we loop on the possible null transitions of each token, recursively call the token simulation function, and finally call the method fprop. The safest way for identifying acceptable trajectories consists of running a preliminary pass for identifying the token configurations from which we can reach the terminal configuration (i.e., both tokens on the end nodes). This\nhoi0 | is easily achieved by enumerating the trajectories in the opposite direction. We start on the end nodes and follow the arcs upstream. During the main pass, we only build the nodes that allow the tokens to reach the terminal configuration.\ntffb | Graph composition using transducers (i.e., standard transduction) is easily and efficiently implemented as a generalized transduction. The method check simply tests the equality of the input symbols on the two arcs, and the method fprop creates a single arc whose symbol is the output symbol on the transducer's arc.\newwt | The composition between pairs of graphs is particularly useful for incorporating linguistic constraints in a handwriting recognizer. Examples of its use are given in the online handwriting recognition system described in Section Nine (and in the check reading system described in Section Ten).\n2tj1 | In the rest of the paper, the term composition transformer will denote a GT based on the generalized transductions of multiple graphs. The concept of generalized transduction is a very general one. In fact, many of the GT's described earlier in this paper, such as the segmenter and the recognizer, can be formulated in terms of generalized transduction. In this case, the generalized transduction does not take two input graphs but a single input graph. The method fprop of the transformer may create several arcs or even a complete subgraph for each arc of the initial graph. In fact the pair check, fprop itself can be seen as procedurally defining a transducer.\nnbhq | In addition, it can be shown that the generalized transduction of a single graph is theoretically equivalent to the standard composition of this graph with a particular transducer graph. However, implementing the operation this way may be very inefficient since the transducer can be very complicated.\nw251 | In practice, the graph produced by a generalized transduction is represented procedurally in order to avoid building the whole output graph (which may be huge when for example the interpretation graph is composed with the grammar graph). We only instantiate the nodes which are visited by the search algorithm during recognition (e.g., Viterbi). This strategy propagates the benefits of pruning algorithms (e.g., beam search) in all the GTN's.\n1vgx | Dee. Notes on the Graph Structures\nyjnk | Section Six discussed the idea of global training by back propagating gradient through simple GT's. The bprop method is the basis of the back-propagation algorithm for generic GT's. A generalized composition transformer can be seen as dynamically establishing functional relationships between the numerical quantities on the input and output arcs. Once the check function has decided that a relationship should be established, the fprop function implements the numerical relationship. The check function establishes the structure of the ephemeral network inside the composition transformer.\n9zmh | Since fprop is assumed to be differentiable, gradients can be back propagated through that structure. Most parameters affect the scores stored on the arcs of the successive\nmi3g | graphs of the system. A few threshold parameters may determine whether an arc appears or not in the graph. Since nonexisting arcs are equivalent to arcs with very large penalties, we only consider the case of parameters affecting the penalties.\nntjg | In the kind of systems we have discussed until now (and the application described in Section Ten), much of the knowledge about the structure of the graph that is produced by a GT is determined by the nature of the GT, but it may also depend on the value of the parameters and on the input. It may also be interesting to consider GT modules which attempt to learn the structure of the output graph. This might be considered a combinatorial problem and not amenable to gradient-based learning, but a solution to this problem is to generate a large graph that contains the graph candidates as subgraphs, and then select the appropriate subgraph.\n86at | Eee. GTN and HMM's\nbpd2 | GTN's can be seen as a generalization and an extension of HMM's. On the one hand, the probabilistic interpretation can be either kept (with penalties being log-probabilities), pushed to the final decision stage (with the difference of the constrained forward penalty and the unconstrained forward penalty being interpreted as negative log-probabilities of label sequences), or dropped altogether (the network just represents a decision surface for label sequences in input space). On the other hand, GTN's extend HMM's by allowing to combine in a well-principled framework multiple levels of processing, or multiple models.\nhkd8 | Unfolding an HMM in time yields a graph that is very similar to our interpretation graph (at the final stage of processing of the GTN, before Viterbi recognition). It has nodes n(t, i) associated to each time step t and state i in the model. The penalty Ci for an arc from n(t minus one, jay) to n(t, i) then corresponds to the negative log-probability of emitting observed data ot at position t and going from state jay to state i in the time interval (t minus one,t). With this probabilistic interpretation, the forward penalty is the negative logarithm of the likelihood of whole observed data sequence (given the model).",
        "role": "assistant",
        "function_call": null,
        "tool_calls": null,
        "refusal": null
      }
    }
  ],
  "created": 1725394124,
  "model": "gpt-4o-2024-05-13",
  "object": "chat.completion",
  "system_fingerprint": "fp_fde2829a40",
  "usage": {
    "completion_tokens": 1469,
    "prompt_tokens": 3210,
    "total_tokens": 4679
  }
}