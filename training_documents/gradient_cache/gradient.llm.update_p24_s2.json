{
  "id": "chatcmpl-A3U7PV4xIaX8AZIaZaMlpuMVVmrVK",
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "message": {
        "content": "yi97 | Another problem with Viterbi training is that the penalty of the answer cannot be used reliably as a measure of confidence because it does not take low-penalty (or high-scoring) competing answers into account.\n4zj7 | B. Discriminative Viterbi Training\n3wgh | A modification of the training criterion can circumvent the collapse problem described above and at the same time produce more reliable confidence values. The idea is to not only minimize the cumulated penalty of the lowest penalty path with the correct interpretation, but also to somehow increase the penalty of competing and possibly incorrect paths that have a dangerously low penalty. This type of criterion is called discriminative because it plays the good answers against the bad ones. Discriminative training procedures can be seen as attempting to build appropriate separating surfaces between classes rather than to model individual classes independently of each other. For example, modeling the conditional distribution of the classes given the input image is more discriminative (focusing more on the classification surface) than having a separate generative model of the input data associated to each class. This is because the conditional approach does not need to assume a particular form for the distribution of the input data.\nuvo3 | One example of discriminative criterion is the difference between the penalty of the Viterbi path in the constrained graph, and the penalty of the Viterbi path in the unconstrained interpretation graph, i.e., the difference between the penalty of the best correct path and the penalty of the best path. The corresponding GTN training architecture is shown in Figure twenty. The left side of the diagram is identical to the GTN used for nondiscriminative Viterbi training. This loss function reduces the risk of collapse because it forces the recognizer to increases the penalty of wrongly recognized objects. Discriminative training can also be seen as another example of error correction procedure, which tends to minimize the difference between the desired output computed in the left half of the GTN in Figure twenty and the actual output computed in the right half of Figure twenty.\nyjbv | Let the discriminative Viterbi loss function be denoted Edvit, and let us call Cevit the penalty of the Viterbi path\nl6it | in the constrained graph and Cvit the penalty of the Viterbi path in the unconstrained interpretation graph.\nh8x1 | Edvit equals Cevit minus Cvit. twelve.\n6qtq | Edvit is always positive since the constrained graph is a subset of the paths in the interpretation graph, and the Viterbi algorithm selects the path with the lowest total penalty. In the ideal case, the two paths Cevit and Cvit coincide, and Edvit is zero.\nwm3n | Back-propagating gradients through the discriminative Viterbi GTN adds some \"negative\" training to the previously described nondiscriminative training. Figure twenty shows how the gradients are back propagated. The left half is identical to the nondiscriminative Viterbi training GTN, therefore the back propagation is identical. The gradients back propagated through the right half of the GTN are multiplied by negative one, since Cvit contributes to the loss with a negative sign. Otherwise the process is similar to the left half. The gradients on arcs of Gint get positive contributions from the left half and negative contributions from the right half. The two contributions must be added since the penalties on Gint arcs are sent to the two halves through a \"Y\" connection in the forward pass. Arcs in Gint that appear neither in Gvit nor in Gevit have a gradient of zero. They do not contribute to the cost. Arcs that appear in both Gvit and Gevit also have zero gradient. The negative one contribution from the right half cancels the positive one contribution from the left half. In other words, when an arc is rightfully part of the answer there is no gradient. If an arc appears in Gevit but not in Gvit, the gradient is positive one. The arc should have had a lower penalty to make it to Gvit. If an arc is in Gvit but not in Gevit, the gradient is negative one. The arc had a low penalty, but it should have had a higher penalty since it is not part of the desired answer.\n1anr | Variations of this technique have been used for the speech recognition. Driancourt and Bottou used a version of it where the loss function is saturated to a fixed value. This can be seen as a generalization of the Learning Vector Quantization two loss function. Other variations of this method use not only the Viterbi path but the K-best paths. The discriminative Viterbi algorithm does not have the flaws of the nondiscriminative version, but there are problems nonetheless. The main problem is that the criterion does not build a margin between the classes. The gradient is zero as soon as the penalty of the constrained Viterbi path is equal to that of the Viterbi path. It would be desirable to push up the penalties of the wrong paths when they are dangerously close to the good one. The following section presents a solution to this problem.\n600w | C. Forward Scoring and Forward Training\n60w7 | While the penalty of the Viterbi path is perfectly appropriate for the purpose of recognition it gives only a partial picture of the situation. Imagine the lowest penalty paths corresponding to several different segmentations produced the same answer (the same label sequence). Then it could be argued that the overall penalty for the interpretation should\n1a5g | be smaller than the penalty obtained when only one path produced that interpretation, because multiple paths with identical label sequences are more evidence that the label sequence is correct. Several rules can be used compute the penalty associated to a graph that contains several parallel paths. We use a combination rule borrowed from a probabilistic interpretation of the penalties as negative log posteriors. In a probabilistic framework, the posterior probability for the interpretation should be the sum of the posteriors for all the paths that produce that interpretation.\n0oof | Translated in terms of penalties, the penalty of an interpretation should be the negative logarithm of the sum of the negative exponentials of the penalties of the individual paths. The overall penalty will be smaller than all the penalties of the individual paths.\np930 | Given an interpretation, there is a well-known method, called the forward algorithm for computing the above quantity efficiently. The penalty computed with this procedure for a particular interpretation is called the forward penalty. Consider again the concept of constrained\nxhc7 | graph, the subgraph of the interpretation graph which contains only the paths that are consistent with a particular label sequence. There is one constrained graph for each possible label sequence. Given an interpretation, running the forward algorithm on the corresponding constrained graph gives the forward penalty for that interpretation. The forward algorithm proceeds in a way very similar to the Viterbi algorithm, except that the operation used at each node to combine the incoming cumulated penalties, instead of being the min function, is the so-called logadd operation, which can be seen as a \"soft\" version of the min function\n6a60 | fn equals logaddi in, ci plus fsi\ndfgj | thirteen\n6ptp | where fstart equals zero, Un is the set of upstream arcs of node n, Ci is the penalty on arc i, and\nqjlj | logadd(x one, x two, and so on) equals negative log sum of exp\nkva7 | Note that because of numerical inaccuracies, it is better to factorize the largest exp negative ri (corresponding to the smallest penalty) out of the logarithm.",
        "role": "assistant",
        "function_call": null,
        "tool_calls": null,
        "refusal": null
      }
    }
  ],
  "created": 1725394123,
  "model": "gpt-4o-2024-05-13",
  "object": "chat.completion",
  "system_fingerprint": "fp_fde2829a40",
  "usage": {
    "completion_tokens": 1570,
    "prompt_tokens": 3334,
    "total_tokens": 4904
  }
}